#!/bin/bash
set -e

cygwin() {
    [[ "$(uname -s | sed -re "s/-.*$//")" = "CYGWIN_NT" ]]
}
xbuild=xbuild

prereqs() {
    hash cmake 2>/dev/null || { echo >&2 "Please install cmake, which is availble through your package manager or http://www.cmake.org/"; exit 1; }
    hash git 2>/dev/null || { echo >&2 "Please install git, which is availble through your package manager or http://git-scm.com/"; exit 1; }
    hash a2x 2>/dev/null || { echo >&2 "Please install asciidoc, which is availble through your package manager or http://asciidoc.org/"; exit 1; }
    hash gcc 2>/dev/null || { echo >&2 "Please install gcc, which is availble through your package manager or https://gcc.gnu.org/"; exit 1; }
    hash python3 2>/dev/null || { echo >&2 "Please install Python 3, which is availble through your package manager or https://www.python.org/"; exit 1; }
    if cygwin; then
        hash msbuild.exe 2>/dev/null || { echo >&2 "Please install Microsoft.NET and add 'C:\\Windows\\Microsoft.NET\\Framework\\v3.5' to your %PATH%. .NET is availble from http://www.microsoft.com/net"; exit 1; }
        xbuild=msbuild.exe
    else
        hash xbuild 2>/dev/null || { echo >&2 "Please install mono, which is availble through your package manager or http://mono-project.com/"; exit 1; }
        hash mono 2>/dev/null || { echo >&2 "Please install mono, which is availble through your package manager or http://mono-project.com/"; exit 1; }
        hash pip3 2>/dev/null || { echo >&2 "Please install pip3, which is availble through your package manager or https://pip.pypa.io/en/latest/installing.html"; exit 1; }
        hash sdl-config 2>/dev/null || { echo >&2 "Please install SDL (and its headers), which is availble through your package manager or http://www.libsdl.org/"; exit 1; }
    fi
}

quiet() {
    output=`$* 2>&1` || { echo $output; exit 1; }
}

install() {
    wd=$(pwd)
    cd $(mktemp -d)
    $*
    cd $wd
}

asroot() {
    if [[ "$(uname -s | sed -re "s/-.*$//")" = "CYGWIN_NT" ]]; then
        quiet $*
    else
        sudo $*
    fi
}

info() {
    echo -ne '\e[0;34m'
    echo -n $*
    echo -e '\e[0m'
}

genkfs() {
    info Downloading genkfs...
    quiet git clone git://github.com/KnightOS/genkfs.git
    cd genkfs
    info Compiling genkfs...
    quiet cmake .
    quiet make
    info Installing genkfs...
    asroot make install
}

kpack() {
    info Downloading kpack...
    quiet git clone git://github.com/KnightOS/kpack.git
    cd kpack
    info Compiling kpack...
    quiet cmake .
    quiet make
    info Installing kpack...
    asroot make install
}

sass() {
    info Downloading sass...
    quiet git clone git://github.com/KnightOS/sass.git
    cd sass
    info Compiling sass...
    quiet make
    info Installing sass...
    asroot make install
}

pip() { # cygwin only
    info Installing pip...
    quiet wget https://bitbucket.org/pypa/setuptools/raw/bootstrap/ez_setup.py
    quiet python3 ez_setup.py
    quiet /usr/bin/easy_install-3.2 pip
}

sdl() { # cygwin only
    info Downloading SDL...
    quiet wget http://www.libsdl.org/release/SDL-1.2.14.tar.gz
    info Extracting SDL...
    quiet tar xf SDL-1.2.14.tar.gz
    cd SDL-1.2.14
    info "Patching for cygwin..."
    quiet wget -O 1.2.14-autoconf.patch http://www.knightos.org/1.2.14-autoconf.patch
    quiet wget -O 1.2.14-cygwin.patch http://www.knightos.org/1.2.14-cygwin.patch
    quiet patch -p0 < 1.2.14-autoconf.patch
    quiet patch -p0 < 1.2.14-cygwin.patch
    quiet ./autogen.sh
    info "Compiling SDL (this is going to take a while)..."
    quiet ./configure --enable-pthreads --enable-pthread-sem --enable-sdl-dlopen --disable-arts --disable-esd \
        --enable-nas --enable-oss --enable-pulseaudio --disable-dga --disable-video-aalib --disable-video-caca \
        --disable-video-dga --enable-video-dummy --disable-video-ggi --enable-video-opengl --enable-video-x11 \
        --disable-video-x11-dgamouse --disable-video-x11-vm --enable-video-x11-xinerama --disable-video-x11-xme \
        --enable-video-x11-xrandr --disable-video-x11-xv --disable-arts-shared --disable-esd-shared \
        --enable-nas-shared --enable-pulseaudio-shared --enable-x11-shared
    quiet make
    info Installing SDL...
    asroot make install
}

sdk() {
    info Downloading SDK...
    quiet git clone git://github.com/KnightOS/sdk.git
    info Installing SDK requirements...
    asroot pip3 install docopt
    asroot pip3 install requests
    cd sdk
    info Installing SDK...
    asroot make install
}

force_all() {
    install genkfs
    install kpack
    install sass
    if cygwin; then
        install sdl
        install pip
    fi
    install sdk
    info KnightOS SDK installed!
}

install_all() {
    hash genkfs 2>/dev/null || install genkfs
    hash kpack 2>/dev/null || install kpack
    hash sass 2>/dev/null || install sass
    if cygwin; then
        hash sdl-config 2>/dev/null || install sdl
        hash pip3 2>/dev/null || install pip
    fi
    hash knightos 2>/dev/null || install sdk
    info KnightOS SDK installed!
}

prereqs
if [[ $# -eq 0 ]]; then
    install_all
    echo "Thanks for installing the KnightOS SDK!"
    echo "You can run 'knightos --help' to find out how to use it."
    echo "Resources are available online at http://www.knightos.org/documentation"
    echo "Have fun!"
else
    case "$1" in
        genkfs)
            install genkfs
            shift 1
            ;;
        kpack)
            install kpack
            shift 1
            ;;
        sass)
            install sass
            shift 1
            ;;
        sdk)
            install sdk
            shift 1
            ;;
        sdl)
            install sdl
            shift 1
            ;;
        pip)
            install pip
            shift 1
            ;;
        all)
            force_all
            shift 1
            ;;
        *)
            echo "Error: $1 is not a valid option."
            exit 1
            ;;
    esac
fi
